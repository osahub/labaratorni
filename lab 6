import math

def calculate_e(a, m, b):
    """Обчислює очікуване значення для задачі."""
    return (a + 4 * m + b) / 6

def calculate_sd(a, b):
    """Обчислює стандартне відхилення для задачі."""
    return (b - a) / 6

def calculate_ci(tasks):
    """Обчислює довірчий інтервал для проекту."""
    
    # Обчислює очікуване значення та стандартне відхилення для кожної задачі
    e_values = []  # Список для зберігання очікуваних значень
    sd_values = []  # Список для зберігання стандартних відхилень
    for task in tasks:
        e_values.append(calculate_e(*task))  # Обчислює та додає очікуване значення до списку
        sd_values.append(calculate_sd(task[0], task[2]))  # Обчислює та додає стандартне відхилення до списку

    # Обчислює очікуване значення та стандартне відхилення для проекту
    e_project = sum(e_values)  # Сума всіх очікуваних значень
    sd_project = math.sqrt(sum([sd ** 2 for sd in sd_values]))  # Корінь квадратний з суми квадратів стандартних відхилень

    # Обчислює довірчий інтервал для проекту
    ci_min = e_project - 2 * sd_project  # Мінімальне значення довірчого інтервалу
    ci_max = e_project + 2 * sd_project  # Максимальне значення довірчого інтервалу

    return ci_min, ci_max

# Просить користувача ввести оцінки для кожної задачі
tasks = []
while True:
    a = float(input("Введіть оптимістичну оцінку для задачі: "))  # Запит на введення оптимістичної оцінки
    m = float(input("Введіть найімовірнішу оцінку для задачі: "))  # Запит на введення найімовірнішої оцінки
    b = float(input("Введіть песимістичну оцінку для задачі: "))  # Запит на введення песимістичної оцінки
    tasks.append((a, m, b))
